trigger:
  branches:
    include:
    - main

pr: none

pool:
  vmImage: windows-latest

variables:
- name: 'NEXT_PUBLIC_BUILD_ID'
  value: '$(Build.SourceVersion)'
- name: 'DistDirectory'
  value: '$(System.DefaultWorkingDirectory)/dist'

- group: next-app-env-vars

- name: 'TargetEnv'
  value: 'production'
- group: next-app-env-vars-production

stages:
- stage: 'Build'
  jobs:
  - job: 'Build'
    steps:
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: node_modules | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/node_modules'

    - task: Cache@2
      displayName: 'Cache .next/cache'
      inputs:
        key: next | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/.next/cache'

    - script: yarn --frozen-lockfile --network-timeout=100000
      displayName: 'yarn install'

    - script: yarn build
      displayName: 'yarn build'

    - task: CopyFiles@2
      displayName: 'Copy Next build to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          .next/**
          public/**
          next.config.js
          package.json
          server.js
          yarn.lock
        TargetFolder: '$(DistDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Azure web app files to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: .azure/web-app/**
        flattenFolders: true
        TargetFolder: '$(DistDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Archive dist to build artifacts'
      inputs:
        rootFolderOrFile: '$(DistDirectory)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/dist.zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'

- stage: 'Deploy'
  jobs:
  - deployment: 'Deploy'
    environment: '$(TargetEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ExtractFiles@1
            displayName: 'Extract dist files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip'
              destinationFolder: '$(DistDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy dist to web app'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(AzureAppService)'
              deployToSlotOrASE: true
              resourceGroupName: '$(AzureResourceGroup)'
              slotName: '$(AzureAppServiceSlot)'
              package: '$(DistDirectory)'
              deploymentMethod: 'zipDeploy'
              appSettings: '-NEXT_COMPRESS "$(NEXT_COMPRESS)" -NEXT_PUBLIC_BUILD_ID "$(NEXT_PUBLIC_BUILD_ID)"'
