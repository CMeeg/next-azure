trigger:
  batch: true
  branches:
    include:
    - main

pr:
- main

pool:
  vmImage: windows-latest

variables:
- name: 'BuildId'
  value: '$(Build.SourceVersion)'
- name: 'DistDirectory'
  value: '$(System.DefaultWorkingDirectory)/dist'
- name: 'InfraDirectory'
  value: '$(System.DefaultWorkingDirectory)/infra'

  # This variable group is used to define "default" variable values that can be overridden by "environment" variables
- group: na-js-env-vars

  # The "preview" environment is the default environment
- group: na-js-env-vars-preview

  # The "production" environment is targeted when the source branch is `main`
- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
  - group: na-js-env-vars-prod

  # This is the ARM deployment name
- name: 'DeploymentName'
  value: $[format('{0}-{1}', variables['EnvironmentName'], variables['Build.BuildNumber'])]

  # The `DeployEnv` is used in deployment jobs - `AzureEnvironment` is the name of the Environment in Azure DevOps, which could be different to the `EnvironmentName`
- name: 'DeployEnv'
  value: $[coalesce(variables['AzureEnvironment'], variables['EnvironmentName'])]

  # If no "shared" resource group is defined, then set it to the "environment" resource group
- name: 'SharedResourceGroupName'
  value: $[coalesce(variables['AzureSharedResourceGroup'], variables['AzureResourceGroup'])]

  # If no slot name provided, then set the target slot to `production` - this has nothing to do with the "production" environment, it essentially means "no slot"
- name: 'WebAppTargetSlotName'
  value: $[coalesce(variables['WebAppSlotName'], 'production')]

  # Deploy to the swap slot if defined, else to the target slot
- name: 'WebAppDeploySlotName'
  value: $[coalesce(variables['WebAppSwapSlotName'], variables['WebAppTargetSlotName'])]

stages:
- stage: 'BuildInfrastructure'
  jobs:
  - job: 'BuildArmTemplate'
    steps:
      # The Bicep build command fails if the output directoy doesn't exist
    - pwsh: md "$(InfraDirectory)"
      displayName: 'Create infra directory'

    - task: AzureCLI@2
      displayName: 'Build ARM template from bicep file'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
        inlineScript: |
          az bicep build -f main.bicep --outdir "$(InfraDirectory)"

      # Replace tokens in the ARM parameters template file with relevant values for this build
    - pwsh: |
        . ./Set-Tokens.ps1
        Set-Tokens `
        -InputFile main.parameters.json.template `
        -OutputFile "$(InfraDirectory)/main.parameters.json" `
        -Tokens @{ `
          resourcePrefix="$(AzureResourcePrefix)"; `
          environment="$(EnvironmentName)"; `
          sharedResourceGroupName="$(SharedResourceGroupName)"; `
          buildId="$(BuildId)"; `
          webAppSkuName="$(WebAppSkuName)"; `
          webAppSkuCapacity=$(WebAppSkuCapacity); `
          webAppSlotName="$(WebAppTargetSlotName)"; `
          webAppSwapSlotName="$(WebAppSwapSlotName)"; `
          webAppDomainName="$(WebAppDomainName)"; `
          webAppCertName="$(WebAppCertName)" `
        }
      workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
      displayName: 'Create ARM parameters file'

      # Publish the ARM template and parameters as build artifacts
    - publish: '$(InfraDirectory)'
      displayName: 'Publish artifacts'
      artifact: infra

      # Run a What-If deployment to aid in reviewing the deployment during approval checks
    - task: AzureCLI@2
      displayName: 'What-If ARM template'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(InfraDirectory)'
        inlineScript: |
          az account show
          az deployment group create -w -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

- stage: 'DeployInfrastructure'
  jobs:
  - deployment: 'DeployArmTemplate'
    environment: '$(DeployEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CopyFiles@2
            displayName: 'Copy infra artifacts to workspace'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/infra'
              TargetFolder: '$(InfraDirectory)'
              Contents: '**'

          - task: AzureCLI@2
            displayName: 'Run ARM template'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: '$(InfraDirectory)'
              inlineScript: |
                az account show
                az deployment group create -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

- stage: 'BuildNextApp'
  jobs:
  - job: 'BuildNextApp'
    steps:
      # Cache build outputs that will speed up subsequent runs if there is no change in dependencies
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: node_modules | $(Agent.OS) | package.json | package-lock.json
        path: '$(System.DefaultWorkingDirectory)/node_modules'
      continueOnError: true

    - task: Cache@2
      displayName: 'Cache .next/cache'
      inputs:
        key: next | $(Agent.OS) | package.json | package-lock.json
        path: '$(System.DefaultWorkingDirectory)/.next/cache'
      continueOnError: true

    - pwsh: npm install
      displayName: 'npm install'

      # Use the app settings output from the ARM deployment to set environment variables that are required for our Next app build
    - task: AzureCLI@2
      displayName: 'Get ARM outputs'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $webAppSettings = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs.webAppSettings.value | ConvertFrom-Json -AsHashtable)
          foreach ($setting in $webAppSettings.GetEnumerator()) { `
          $key=$setting.Key; $value=$setting.Value; `
          Write-Output("##vso[task.setvariable variable=${key};]${value}") `
          }

    - pwsh: npm run build
      displayName: 'npm run build'

      # `node_modules` are not included in the build artifact - they will be installed on the server by a post-deployment script
    - task: CopyFiles@2
      displayName: 'Copy build to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          .next/**
          public/**
          next.config.js
          package.json
          package-lock.json
          server.js
        TargetFolder: '$(DistDirectory)'

      # These files are required by the app service to run the Next app under IIS, and include the post-deployment script mentioned in the previous task
    - task: CopyFiles@2
      displayName: 'Copy Azure web app files to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: .azure/web-app/**
        flattenFolders: true
        TargetFolder: '$(DistDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Archive dist'
      inputs:
        rootFolderOrFile: '$(DistDirectory)'
        includeRootFolder: false
        archiveFile: '$(DistDirectory)/dist.zip'

      # Publish the app build output as build artifacts
    - publish: '$(DistDirectory)/dist.zip'
      displayName: 'Publish artifacts'
      artifact: next

- stage: 'DeployNextApp'
  jobs:
  - deployment: 'DeployNextApp'
    environment: '$(DeployEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
            # Get the name of the app service we are deploying to from the ARM deployment outputs
          - task: AzureCLI@2
            displayName: 'Get ARM outputs'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $outputs = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs | ConvertFrom-Json)
                $webAppName = $outputs.webAppName.value
                Write-Output("##vso[task.setvariable variable=WebAppName;]$webAppName")

            # Deploy to the app service using zip deploy
          - task: AzureWebApp@1
            displayName: 'Deploy dist to web app'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(WebAppName)'
              appType: 'webApp'
              deployToSlotOrASE: true
              resourceGroupName: '$(SharedResourceGroupName)'
              slotName: '$(WebAppDeploySlotName)'
              package: '$(Pipeline.Workspace)/next/dist.zip'
              deploymentMethod: 'zipDeploy'
