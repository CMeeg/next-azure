trigger:
  batch: true
  branches:
    include:
    - main

pr:
- main

pool:
  vmImage: windows-latest

variables:
- name: 'BuildId'
  value: '$(Build.SourceVersion)'
- name: 'DistDirectory'
  value: '$(System.DefaultWorkingDirectory)/dist'
- name: 'InfraDirectory'
  value: '$(System.DefaultWorkingDirectory)/infra'

- name: 'TargetEnv'
  value: 'preview'
- group: next-app-env-vars-preview

- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
  - name: 'TargetEnv'
    value: 'prod'
  - group: next-app-env-vars-prod

- name: 'DeploymentName'
  value: $[format('{0}-{1}', variables['TargetEnv'], variables['Build.BuildNumber'])]

- ${{ if eq(variables['AzureSharedResourceGroup'], '') }}:
  - name: 'AzureSharedResourceGroup'
    value: $(AzureResourceGroup)

- ${{ if eq(variables['WebAppSlotName'], '') }}:
  - name: 'WebAppSlotName'
    value: 'production'

- ${{ if eq(variables['WebAppSkuName'], '') }}:
  - name: 'WebAppSkuName'
    value: 'F1'

- ${{ if eq(variables['WebAppSkuCapacity'], '') }}:
  - name: 'WebAppSkuCapacity'
    value: '1'

stages:
- stage: 'InfrastructureBuild'
  jobs:
  - job: 'BuildArmTemplate'
    steps:
    - pwsh: md "$(InfraDirectory)"
      displayName: 'Create infra directory'

    - task: AzureCLI@2
      displayName: 'Build ARM template from bicep file'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
        inlineScript: |
          az bicep build -f main.bicep --outdir "$(InfraDirectory)"

    - pwsh: |
        . ./Set-Tokens.ps1
        Set-Tokens `
          -InputFile main.parameters.json.template `
          -OutputFile "$(InfraDirectory)/main.parameters.json" `
          -Tokens @{ `
            environment="$(TargetEnv)"; `
            sharedResourceGroupName="$(AzureSharedResourceGroup)"; `
            buildId="$(BuildId)"; `
            webAppSkuName="$(WebAppSkuName)"; `
            webAppSkuCapacity=$(WebAppSkuCapacity); `
            webAppSlotName="$(WebAppSlotName)" `
          }
      workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
      displayName: 'Create ARM parameters file'

    - task: AzureCLI@2
      displayName: 'What-If ARM template'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(InfraDirectory)'
        inlineScript: |
          az account show
          az deployment group create -w -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

    - publish: '$(InfraDirectory)'
      displayName: 'Publish artifacts'
      artifact: infra

- stage: 'InfrastructureDeploy'
  jobs:
  - deployment: 'DeployArmTemplate'
    environment: '$(TargetEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CopyFiles@2
            displayName: 'Copy infra artifacts to workspace'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/infra'
              TargetFolder: '$(InfraDirectory)'
              Contents: '**'

          - task: AzureCLI@2
            displayName: 'Run ARM template'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: '$(InfraDirectory)'
              inlineScript: |
                az account show
                az deployment group create -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

- stage: 'NextAppBuild'
  jobs:
  - job: 'BuildNextApp'
    steps:
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: node_modules | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/node_modules'

    - task: Cache@2
      displayName: 'Cache .next/cache'
      inputs:
        key: next | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/.next/cache'

    - pwsh: yarn --frozen-lockfile --network-timeout=100000
      displayName: 'yarn install'

    - task: AzureCLI@2
      displayName: 'Get ARM outputs'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $webAppSettings = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs.webAppSettings.value | ConvertFrom-Json -AsHashtable)
          foreach ($setting in $webAppSettings.GetEnumerator()) { $key=$setting.Key; $value=$setting.Value; Write-Output("##vso[task.setvariable variable=${key};]${value}") }

    - pwsh: yarn build
      displayName: 'yarn build'

    - task: CopyFiles@2
      displayName: 'Copy build to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          .next/**
          public/**
          next.config.js
          package.json
          server.js
          yarn.lock
        TargetFolder: '$(DistDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Azure web app files to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: .azure/web-app/**
        flattenFolders: true
        TargetFolder: '$(DistDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Archive dist to build artifacts'
      inputs:
        rootFolderOrFile: '$(DistDirectory)'
        includeRootFolder: false
        archiveFile: '$(DistDirectory)/dist.zip'

    - publish: '$(DistDirectory)/dist.zip'
      displayName: 'Publish artifacts'
      artifact: next

- stage: 'NextAppDeploy'
  jobs:
  - deployment: 'DeployNextApp'
    environment: '$(TargetEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ExtractFiles@1
            displayName: 'Extract dist files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/next/dist.zip'
              destinationFolder: '$(DistDirectory)'

          - task: AzureCLI@2
            displayName: 'Get ARM outputs'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $outputs = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs | ConvertFrom-Json)
                $webAppName = $outputs.webAppName.value
                Write-Output("##vso[task.setvariable variable=WebAppName;]$webAppName")

          - task: AzureWebApp@1
            displayName: 'Deploy dist to web app'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(WebAppName)'
              appType: 'webApp'
              deployToSlotOrASE: true
              resourceGroupName: '$(AzureSharedResourceGroup)'
              slotName: '$(WebAppSlotName)'
              package: '$(DistDirectory)'
              deploymentMethod: 'zipDeploy'
