trigger:
  batch: true
  branches:
    include:
    - main

pr:
- main

pool:
  vmImage: windows-latest

variables:
- name: 'NEXT_PUBLIC_BUILD_ID'
  value: '$(Build.SourceVersion)'
- name: 'DistDirectory'
  value: '$(System.DefaultWorkingDirectory)/dist'

- group: next-app-env-vars

- name: 'TargetEnv'
  value: 'preview'
- group: next-app-env-vars-preview

- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
  - name: 'TargetEnv'
    value: 'prod'
  - group: next-app-env-vars-prod

stages:
- stage: 'Infrastructure'
  jobs:
  - job: 'Infrastructure'
    steps:
    - task: AzureCLI@2
      displayName: 'Build ARM template from bicep file'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az --version
          az bicep build -f "./.azure/infra/main.bicep" --outdir '$(Build.ArtifactStagingDirectory)'

    - task: AzureCLI@2
      displayName: 'Run ARM template'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az account show
          az deployment group create -f "$(Build.ArtifactStagingDirectory)/main.json" -g $(AzureResourceGroup) --parameters environment=$(TargetEnv) buildId=$(NEXT_PUBLIC_BUILD_ID) webAppSkuName=$(WebAppSkuName) webAppSkuCapacity=$(WebAppSkuCapacity)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'

- stage: 'Build'
  jobs:
  - job: 'Build'
    steps:
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: node_modules | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/node_modules'

    - task: Cache@2
      displayName: 'Cache .next/cache'
      inputs:
        key: next | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/.next/cache'

    - script: yarn --frozen-lockfile --network-timeout=100000
      displayName: 'yarn install'

    - task: AzureCLI@2
      displayName: 'Get ARM outputs'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $webAppInsightsInstrumentationKey= & az deployment group show -n main -g $(AzureResourceGroup) --query properties.outputs.webAppInsightsInstrumentationKey.value
          $webAppInsightsInstrumentationKey = $webAppInsightsInstrumentationKey.replace("""", "")
          Write-Output("##vso[task.setvariable variable=NEXT_PUBLIC_APPINSIGHTS_INSTRUMENTATIONKEY;]$webAppInsightsInstrumentationKey")
          $cdnEndpointUrl= & az deployment group show -n main -g $(AzureResourceGroup) --query properties.outputs.cdnEndpointUrl.value
          $cdnEndpointUrl = $cdnEndpointUrl.replace("""", "")
          Write-Output("##vso[task.setvariable variable=NEXT_PUBLIC_CDN_URL;]$cdnEndpointUrl")

    - script: yarn build
      displayName: 'yarn build'

    - task: CopyFiles@2
      displayName: 'Copy Next build to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          .next/**
          public/**
          next.config.js
          package.json
          server.js
          yarn.lock
        TargetFolder: '$(DistDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Azure web app files to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: .azure/web-app/**
        flattenFolders: true
        TargetFolder: '$(DistDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Archive dist to build artifacts'
      inputs:
        rootFolderOrFile: '$(DistDirectory)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/dist.zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'

- stage: 'Deploy'
  jobs:
  - deployment: 'Deploy'
    environment: '$(TargetEnv)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ExtractFiles@1
            displayName: 'Extract dist files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip'
              destinationFolder: '$(DistDirectory)'

          - task: AzureCLI@2
            displayName: 'Get ARM outputs'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $webAppName= & az deployment group show -n main -g $(AzureResourceGroup) --query properties.outputs.webAppName.value
                $webAppName = $webAppName.replace("""", "")
                Write-Output("##vso[task.setvariable variable=WebAppName;]$webAppName")

          - task: AzureWebApp@1
            displayName: 'Deploy dist to web app'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(WebAppName)'
              deployToSlotOrASE: true
              resourceGroupName: '$(AzureResourceGroup)'
              slotName: '$(WebAppSlot)'
              package: '$(DistDirectory)'
              deploymentMethod: 'zipDeploy'
